use big_int::{BigInt, BigIntMod};
use rsa::{generate_primes, generate_keys};
use math::{gcd, lcm, mod_inverse};

use std::thread;

mod block;
mod merkle;
mod transaction;
mod common;
mod big_int;
mod random;
mod rsa;
mod math;

fn main() {
    // let modulo = BigInt::<128>::from_num(2).pow(4000) - BigInt::<128>::from_num(8);
    // let num = BigIntMod::<128>::from_num(5, modulo);
    // let exp = BigInt::<128>::from_num(2).pow(100);
    // println!("{}", num.pow(exp));
    // let p = generate_prime();
    // println!("p: {}", p);
    generate_keys();
    let e = BigInt::<100>::from_num(65537);
    let d = BigInt::<50>::from_hex_stringresize::<100>();
    let n = BigInt::<50>::from_hex_string("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000620783A73E602342B24B53A556790669DC3F67203AC361186381F65288ABD599D8FB04ECFC3629E2AC01816CE4A2F9982A56E8E239325B86599407DE5852591EF1881E7063407940DBD469E70CAD16280601C731518C4CC99036A2C1059A998C25709A55A87282546E66FE6680E30231BDF184DE19C74FBD70239FE8D9FCEC03C2CC55C1C0AECC05F5B547C423BFDEFD56D385F7F9BB65F5A6DB49E0CDC6FB4FE0ECCE4ACD20955C32BA2AF34654A029255546602D397AF07785048C265CA4EAA6E470BCA3B1234FCE27BD3B90E30A3723726D7BF2E9E6FC926CC2C53C97218FA9B3B700E50A098DEF527528DDABCEE389F17AFEE46D1CBD9C9CC431EAC5CAEE133DBA10FA14AEF7EF7E4A5B41590E595A92FE0ACEFF9A5110BBAF5CAE2A42C17D8F93123B6256F2BDACC2800E2221E4CA9BE806B87AC368D802E1787545DEBE79C5638D9B07FAA6572C0B125F4ADBC2E20CFFCD5928FB7489B758D3BAA9E595").resize::<100>();

    // Message
    let m = BigIntMod::<100>::new(BigInt::<4>::from_hex_string("ABACADABA12300000CAB00000AD12398748912AA00112233748912AA00112233").resize(), n);

    // Encrypted message
    let c = m.pow(e);
    println!("c: {}", c);

    // Decrypted message
    let m2 = c.pow(d);
    println!("m2: {}", m2);
}   